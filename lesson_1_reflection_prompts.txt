How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Was able to quickly compare the differences between the 2 files and visually spot the bug.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Could help me see what changes I made quicker, revert back quicker if there was a problem, and ultimately learn what code worked or didn't work.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pro, don't have to worry about saving my work when in a hurry and quitting out of something. However, con is may not want to save changes if I 
	am just playing around with something.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Speed, so you don't have to take the time to save each file individually. Plus, several of the files may be linked (making calls to each other) 
	or require changes to all files, so knowing the total changes across all files is helpful.

How can you use the commands git log and git diff to view the history of files?

    Git log will show the various commits performed, with time/date change was made, who made the change, and a comment on what change(s) were made. 
	Git diff allows me to compare two different versions of the code (2 different commit ids) to hightlight the differences between the 2 files (much 
	like FC on Windows, or diff on Mac/Linux systems).

How might using version control make you more confident to make changes that
could break something?

    I can always revert to an older version that was correct!

Now that you have your workspace set up, what do you want to try using Git for?

    Haven't the foggiest yet!
